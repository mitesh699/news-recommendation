import React, { useState, useEffect } from 'react';
import { Link, useNavigate } from 'react-router-dom';
import PageLayout from '../components/layout/PageLayout';
import { useAuth } from '../context/AuthContext';
import { 
  User, Settings, BookmarkIcon, History, Bell, Shield, 
  LogOut, Check, X, Edit2, Save
} from 'lucide-react';
import { getSavedArticles, removeSavedArticle, getReadingHistory, clearReadingHistory } from '../services/userDataService';

const UserProfile = () => {
  const { currentUser, isAuthenticated, isLoading, logout, updateUserPreferences } = useAuth();
  const navigate = useNavigate();
  
  // State for profile sections
  const [activeTab, setActiveTab] = useState('general');
  const [isEditing, setIsEditing] = useState(false);
  const [saveStatus, setSaveStatus] = useState(null); // null, 'saving', 'success', 'error'
  
  // User preferences state
  const [userPreferences, setUserPreferences] = useState({
    name: '',
    email: '',
    preferences: {
      topics: [],
      sources: [],
      darkMode: false,
      emailNotifications: true,
      pushNotifications: true
    }
  });
  
  // Available topics and sources for selection
  const availableTopics = [
    'Technology', 'Business', 'Politics', 'Health', 'Science', 
    'Environment', 'Sports', 'Entertainment', 'World', 'Education'
  ];
  
  const availableSources = [
    'BBC News', 'CNN', 'Reuters', 'Associated Press', 
    'New York Times', 'The Guardian', 'Al Jazeera', 'Bloomberg',
    'Financial Times', 'Tech Review', 'Nature', 'Science Daily'
  ];
  
  // Saved articles and reading history from localStorage
  const [savedArticles, setSavedArticles] = useState([]);
  const [readingHistory, setReadingHistory] = useState([]);
  
  // Load user data
  useEffect(() => {
    if (currentUser) {
      setUserPreferences({
        name: currentUser.name || '',
        email: currentUser.email || '',
        preferences: {
          ...currentUser.preferences
        }
      });
      
      // Get saved articles from localStorage
      setSavedArticles(getSavedArticles());
      
      // Get reading history from localStorage
      setReadingHistory(getReadingHistory());
          publishedAt: '2025-03-26T13:45:00Z',
          url: '/article/history3',
          topic: 'Transportation',
          readAt: '2025-03-26T18:20:00Z'
        }
      ]);
    }
  }, [currentUser]);
  
  // Redirect if not authenticated
  useEffect(() => {
    if (!isLoading && !isAuthenticated) {
      navigate('/login', { state: { from: { pathname: '/profile' } } });
    }
  }, [isAuthenticated, isLoading, navigate]);
  
  // Handle tab change
  const handleTabChange = (tab) => {
    setActiveTab(tab);
    setIsEditing(false);
  };
  
  // Toggle edit mode
  const toggleEdit = () => {
    setIsEditing(!isEditing);
    setSaveStatus(null);
  };
  
  // Handle preference changes
  const handleInputChange = (e) => {
    const { name, value } = e.target;
    
    setUserPreferences(prev => ({
      ...prev,
      [name]: value
    }));
  };
  
  // Handle checkbox/toggle changes
  const handleToggleChange = (e) => {
    const { name, checked } = e.target;
    
    setUserPreferences(prev => ({
      ...prev,
      preferences: {
        ...prev.preferences,
        [name]: checked
      }
    }));
  };
  
  // Handle topic selection
  const handleTopicToggle = (topic) => {
    setUserPreferences(prev => {
      const currentTopics = [...prev.preferences.topics];
      
      if (currentTopics.includes(topic)) {
        // Remove topic if already selected
        return {
          ...prev,
          preferences: {
            ...prev.preferences,
            topics: currentTopics.filter(t => t !== topic)
          }
        };
      } else {
        // Add topic if not selected
        return {
          ...prev,
          preferences: {
            ...prev.preferences,
            topics: [...currentTopics, topic]
          }
        };
      }
    });
  };
  
  // Handle source selection
  const handleSourceToggle = (source) => {
    setUserPreferences(prev => {
      const currentSources = [...prev.preferences.sources];
      
      if (currentSources.includes(source)) {
        // Remove source if already selected
        return {
          ...prev,
          preferences: {
            ...prev.preferences,
            sources: currentSources.filter(s => s !== source)
          }
        };
      } else {
        // Add source if not selected
        return {
          ...prev,
          preferences: {
            ...prev.preferences,
            sources: [...currentSources, source]
          }
        };
      }
    });
  };
  
  // Save user preferences
  const savePreferences = async () => {
    try {
      setSaveStatus('saving');
      
      // In a real app, this would update the backend
      await updateUserPreferences(userPreferences);
      
      setSaveStatus('success');
      
      // Reset success message after delay
      setTimeout(() => {
        setSaveStatus(null);
        setIsEditing(false);
      }, 2000);
      
    } catch (error) {
      console.error('Error saving preferences:', error);
      setSaveStatus('error');
    }
  };
  
  // Handle logout
  const handleLogout = () => {
    logout();
    navigate('/');
  };
  
  // Format date for display
  const formatDate = (dateString) => {
    const date = new Date(dateString);
    return date.toLocaleDateString('en-US', { 
      month: 'short', 
      day: 'numeric', 
      hour: 'numeric', 
      minute: 'numeric' 
    });
  };
  
  // Remove saved article
  const removeSavedArticle = (articleId) => {
    setSavedArticles(prev => prev.filter(article => article.id !== articleId));
    // In a real app, this would also update the backend
  };
  
  // Clear reading history
  const clearReadingHistory = () => {
    setReadingHistory([]);
    // In a real app, this would also update the backend
  };

  if (isLoading) {
    return (
      <PageLayout>
        <div className="flex justify-center items-center h-64">
          <div className="animate-spin rounded-full h-12 w-12 border-t-2 border-b-2 border-blue-500"></div>
        </div>
      </PageLayout>
    );
  }

  return (
    <PageLayout>
      <div className="max-w-6xl mx-auto">
        <div className="flex flex-col md:flex-row gap-6">
          {/* Sidebar with navigation */}
          <div className="w-full md:w-64 bg-white rounded-lg shadow-md p-6">
            <div className="flex flex-col items-center mb-6">
              <div className="w-24 h-24 rounded-full bg-gray-200 mb-4 overflow-hidden">
                <img 
                  src={currentUser?.avatar || '/api/placeholder/200/200'} 
                  alt="User avatar" 
                  className="w-full h-full object-cover"
                />
              </div>
              <h2 className="text-xl font-bold">{currentUser?.name}</h2>
              <p className="text-gray-500 text-sm">{currentUser?.email}</p>
            </div>
            
            <nav className="space-y-1">
              <button
                onClick={() => handleTabChange('general')}
                className={`flex items-center w-full px-4 py-2 rounded-md ${
                  activeTab === 'general' 
                    ? 'bg-blue-50 text-blue-600' 
                    : 'text-gray-700 hover:bg-gray-100'
                }`}
              >
                <User size={18} className="mr-3" />
                <span>General</span>
              </button>
              
              <button
                onClick={() => handleTabChange('preferences')}
                className={`flex items-center w-full px-4 py-2 rounded-md ${
                  activeTab === 'preferences' 
                    ? 'bg-blue-50 text-blue-600' 
                    : 'text-gray-700 hover:bg-gray-100'
                }`}
              >
                <Settings size={18} className="mr-3" />
                <span>Preferences</span>
              </button>
              
              <button
                onClick={() => handleTabChange('saved')}
                className={`flex items-center w-full px-4 py-2 rounded-md ${
                  activeTab === 'saved' 
                    ? 'bg-blue-50 text-blue-600' 
                    : 'text-gray-700 hover:bg-gray-100'
                }`}
              >
                <BookmarkIcon size={18} className="mr-3" />
                <span>Saved Articles</span>
              </button>
              
              <button
                onClick={() => handleTabChange('history')}
                className={`flex items-center w-full px-4 py-2 rounded-md ${
                  activeTab === 'history' 
                    ? 'bg-blue-50 text-blue-600' 
                    : 'text-gray-700 hover:bg-gray-100'
                }`}
              >
                <History size={18} className="mr-3" />
                <span>Reading History</span>
              </button>
              
              <button
                onClick={() => handleTabChange('notifications')}
                className={`flex items-center w-full px-4 py-2 rounded-md ${
                  activeTab === 'notifications' 
                    ? 'bg-blue-50 text-blue-600' 
                    : 'text-gray-700 hover:bg-gray-100'
                }`}
              >
                <Bell size={18} className="mr-3" />
                <span>Notifications</span>
              </button>
              
              <button
                onClick={() => handleTabChange('privacy')}
                className={`flex items-center w-full px-4 py-2 rounded-md ${
                  activeTab === 'privacy' 
                    ? 'bg-blue-50 text-blue-600' 
                    : 'text-gray-700 hover:bg-gray-100'
                }`}
              >
                <Shield size={18} className="mr-3" />
                <span>Privacy & Security</span>
              </button>
              
              <button
                onClick={handleLogout}
                className="flex items-center w-full px-4 py-2 text-red-600 hover:bg-red-50 rounded-md"
              >
                <LogOut size={18} className="mr-3" />
                <span>Logout</span>
              </button>
            </nav>
          </div>
          
          {/* Main content area */}
          <div className="flex-1 bg-white rounded-lg shadow-md p-6">
            {/* General Settings */}
            {activeTab === 'general' && (
              <div>
                <div className="flex justify-between items-center mb-6">
                  <h2 className="text-2xl font-bold">General Settings</h2>
                  <button
                    onClick={toggleEdit}
                    className={`flex items-center px-4 py-2 rounded-md text-sm ${
                      isEditing
                        ? 'bg-gray-100 text-gray-700'
                        : 'bg-blue-600 text-white hover:bg-blue-700'
                    }`}
                  >
                    {isEditing ? (
                      <>
                        <X size={16} className="mr-2" />
                        <span>Cancel</span>
                      </>
                    ) : (
                      <>
                        <Edit2 size={16} className="mr-2" />
                        <span>Edit Profile</span>
                      </>
                    )}
                  </button>
                </div>
                
                {saveStatus === 'success' && (
                  <div className="mb-4 bg-green-50 border-l-4 border-green-500 p-4">
                    <div className="flex">
                      <div className="flex-shrink-0">
                        <Check className="h-5 w-5 text-green-500" />
                      </div>
                      <div className="ml-3">
                        <p className="text-sm text-green-700">Your profile has been updated successfully.</p>
                      </div>
                    </div>
                  </div>
                )}
                
                {saveStatus === 'error' && (
                  <div className="mb-4 bg-red-50 border-l-4 border-red-500 p-4">
                    <div className="flex">
                      <div className="flex-shrink-0">
                        <X className="h-5 w-5 text-red-500" />
                      </div>
                      <div className="ml-3">
                        <p className="text-sm text-red-700">There was an error updating your profile. Please try again.</p>
                      </div>
                    </div>
                  </div>
                )}
                
                <div className="space-y-6">
                  {/* Name field */}
                  <div>
                    <label htmlFor="name" className="block text-sm font-medium text-gray-700 mb-1">
                      Name
                    </label>
                    {isEditing ? (
                      <input
                        type="text"
                        id="name"
                        name="name"
                        value={userPreferences.name}
                        onChange={handleInputChange}
                        className="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-blue-500 focus:border-blue-500"
                      />
                    ) : (
                      <div className="text-gray-900 py-2">{userPreferences.name}</div>
                    )}
                  </div>
                  
                  {/* Email field */}
                  <div>
                    <label htmlFor="email" className="block text-sm font-medium text-gray-700 mb-1">
                      Email Address
                    </label>
                    {isEditing ? (
                      <input
                        type="email"
                        id="email"
                        name="email"
                        value={userPreferences.email}
                        onChange={handleInputChange}
                        className="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-blue-500 focus:border-blue-500"
                      />
                    ) : (
                      <div className="text-gray-900 py-2">{userPreferences.email}</div>
                    )}
                  </div>
                  
                  {/* Member since */}
                  <div>
                    <label className="block text-sm font-medium text-gray-700 mb-1">
                      Member Since
                    </label>
                    <div className="text-gray-900 py-2">March 2025</div>
                  </div>
                  
                  {/* Save button */}
                  {isEditing && (
                    <div className="flex justify-end">
                      <button
                        onClick={savePreferences}
                        disabled={saveStatus === 'saving'}
                        className="flex items-center px-4 py-2 bg-blue-600 text-white rounded-md hover:bg-blue-700 disabled:opacity-50"
                      >
                        {saveStatus === 'saving' ? (
                          <>
                            <div className="animate-spin rounded-full h-4 w-4 border-t-2 border-b-2 border-white mr-2"></div>
                            <span>Saving...</span>
                          </>
                        ) : (
                          <>
                            <Save size={16} className="mr-2" />
                            <span>Save Changes</span>
                          </>
                        )}
                      </button>
                    </div>
                  )}
                </div>
              </div>
            )}
            
            {/* Preferences */}
            {activeTab === 'preferences' && (
              <div>
                <div className="flex justify-between items-center mb-6">
                  <h2 className="text-2xl font-bold">News Preferences</h2>
                  <button
                    onClick={toggleEdit}
                    className={`flex items-center px-4 py-2 rounded-md text-sm ${
                      isEditing
                        ? 'bg-gray-100 text-gray-700'
                        : 'bg-blue-600 text-white hover:bg-blue-700'
                    }`}
                  >
                    {isEditing ? (
                      <>
                        <X size={16} className="mr-2" />
                        <span>Cancel</span>
                      </>
                    ) : (
                      <>
                        <Edit2 size={16} className="mr-2" />
                        <span>Edit Preferences</span>
                      </>
                    )}
                  </button>
                </div>
                
                {saveStatus === 'success' && (
                  <div className="mb-4 bg-green-50 border-l-4 border-green-500 p-4">
                    <div className="flex">
                      <div className="flex-shrink-0">
                        <Check className="h-5 w-5 text-green-500" />
                      </div>
                      <div className="ml-3">
                        <p className="text-sm text-green-700">Your preferences have been updated successfully.</p>
                      </div>
                    </div>
                  </div>
                )}
                
                <div className="space-y-8">
                  {/* Topics section */}
                  <div>
                    <h3 className="text-lg font-medium text-gray-900 mb-4">Topics of Interest</h3>
                    
                    {isEditing ? (
                      <div className="grid grid-cols-2 md:grid-cols-3 lg:grid-cols-4 gap-3">
                        {availableTopics.map((topic) => (
                          <label key={topic} className="flex items-center">
                            <input
                              type="checkbox"
                              checked={userPreferences.preferences.topics.includes(topic)}
                              onChange={() => handleTopicToggle(topic)}
                              className="h-4 w-4 text-blue-600 focus:ring-blue-500 border-gray-300 rounded"
                            />
                            <span className="ml-2 text-gray-700">{topic}</span>
                          </label>
                        ))}
                      </div>
                    ) : (
                      <div className="flex flex-wrap gap-2">
                        {userPreferences.preferences.topics.length > 0 ? (
                          userPreferences.preferences.topics.map((topic) => (
                            <span 
                              key={topic}
                              className="px-3 py-1 bg-blue-100 text-blue-800 rounded-full text-sm"
                            >
                              {topic}
                            </span>
                          ))
                        ) : (
                          <p className="text-gray-500">No topics selected. Edit your preferences to select topics.</p>
                        )}
                      </div>
                    )}
                  </div>
                  
                  {/* Sources section */}
                  <div>
                    <h3 className="text-lg font-medium text-gray-900 mb-4">Preferred Sources</h3>
                    
                    {isEditing ? (
                      <div className="grid grid-cols-2 md:grid-cols-3 gap-3">
                        {availableSources.map((source) => (
                          <label key={source} className="flex items-center">
                            <input
                              type="checkbox"
                              checked={userPreferences.preferences.sources.includes(source)}
                              onChange={() => handleSourceToggle(source)}
                              className="h-4 w-4 text-blue-600 focus:ring-blue-500 border-gray-300 rounded"
                            />
                            <span className="ml-2 text-gray-700">{source}</span>
                          </label>
                        ))}
                      </div>
                    ) : (
                      <div className="flex flex-wrap gap-2">
                        {userPreferences.preferences.sources.length > 0 ? (
                          userPreferences.preferences.sources.map((source) => (
                            <span 
                              key={source}
                              className="px-3 py-1 bg-gray-100 text-gray-800 rounded-full text-sm"
                            >
                              {source}
                            </span>
                          ))
                        ) : (
                          <p className="text-gray-500">No sources selected. Edit your preferences to select sources.</p>
                        )}
                      </div>
                    )}
                  </div>
                  
                  {/* Display preferences */}
                  <div>
                    <h3 className="text-lg font-medium text-gray-900 mb-4">Display Preferences</h3>
                    
                    <div className="space-y-4">
                      <label className="flex items-center">
                        <input
                          type="checkbox"
                          name="darkMode"
                          checked={userPreferences.preferences.darkMode}
                          onChange={handleToggleChange}
                          disabled={!isEditing}
                          className="h-4 w-4 text-blue-600 focus:ring-blue-500 border-gray-300 rounded"
                        />
                        <span className="ml-2 text-gray-700">Dark Mode</span>
                      </label>
                    </div>
                  </div>
                  
                  {/* Save button */}
                  {isEditing && (
                    <div className="flex justify-end">
                      <button
                        onClick={savePreferences}
                        disabled={saveStatus === 'saving'}
                        className="flex items-center px-4 py-2 bg-blue-600 text-white rounded-md hover:bg-blue-700 disabled:opacity-50"
                      >
                        {saveStatus === 'saving' ? (
                          <>
                            <div className="animate-spin rounded-full h-4 w-4 border-t-2 border-b-2 border-white mr-2"></div>
                            <span>Saving...</span>
                          </>
                        ) : (
                          <>
                            <Save size={16} className="mr-2" />
                            <span>Save Preferences</span>
                          </>
                        )}
                      </button>
                    </div>
                  )}
                </div>
              </div>
            )}
            
            {/* Saved Articles */}
            {activeTab === 'saved' && (
              <div>
                <h2 className="text-2xl font-bold mb-6">Saved Articles</h2>
                
                {savedArticles.length > 0 ? (
                  <div className="space-y-4">
                    {savedArticles.map((article) => (
                      <div key={article.id} className="flex bg-white border border-gray-200 rounded-lg overflow-hidden">
                        <div className="w-1/4 flex-shrink-0">
                          <img 
                            src={article.imageUrl} 
                            alt={article.title}
                            className="w-full h-full object-cover"
                          />
                        </div>
                        
                        <div className="flex-1 p-4">
                          <div className="flex justify-between">
                            <div className="text-sm text-gray-500 mb-1">
                              {article.source} • Saved on {formatDate(article.savedAt)}
                            </div>
                            <button 
                              onClick={() => removeSavedArticle(article.id)}
                              className="text-gray-400 hover:text-red-500"
                              aria-label="Remove from saved"
                            >
                              <X size={16} />
                            </button>
                          </div>
                          
                          <Link to={article.url} className="block">
                            <h3 className="text-lg font-semibold text-gray-900 mb-2 hover:text-blue-600">
                              {article.title}
                            </h3>
                            <p className="text-gray-600 text-sm mb-2">{article.summary}</p>
                          </Link>
                          
                          <div className="flex justify-between items-center">
                            <span className="text-xs bg-blue-100 text-blue-800 px-2 py-1 rounded-full">
                              {article.topic}
                            </span>
                          </div>
                        </div>
                      </div>
                    ))}
                  </div>
                ) : (
                  <div className="text-center py-12 bg-gray-50 rounded-lg">
                    <BookmarkIcon size={48} className="mx-auto text-gray-400 mb-4" />
                    <h3 className="text-xl font-medium text-gray-900 mb-2">No saved articles</h3>
                    <p className="text-gray-500 mb-6">
                      Articles you save will appear here for easy access.
                    </p>
                    <Link
                      to="/"
                      className="inline-flex items-center px-4 py-2 bg-blue-600 text-white rounded-md hover:bg-blue-700"
                    >
                      Browse News
                    </Link>
                  </div>
                )}
              </div>
            )}
            
            {/* Reading History */}
            {activeTab === 'history' && (
              <div>
                <div className="flex justify-between items-center mb-6">
                  <h2 className="text-2xl font-bold">Reading History</h2>
                  {readingHistory.length > 0 && (
                    <button
                      onClick={clearReadingHistory}
                      className="text-sm text-red-600 hover:text-red-800"
                    >
                      Clear History
                    </button>
                  )}
                </div>
                
                {readingHistory.length > 0 ? (
                  <div className="space-y-4">
                    {readingHistory.map((article) => (
                      <div key={article.id} className="flex bg-white border border-gray-200 rounded-lg overflow-hidden">
                        <div className="w-1/4 flex-shrink-0">
                          <img 
                            src={article.imageUrl} 
                            alt={article.title}
                            className="w-full h-full object-cover"
                          />
                        </div>
                        
                        <div className="flex-1 p-4">
                          <div className="text-sm text-gray-500 mb-1">
                            {article.source} • Read on {formatDate(article.readAt)}
                          </div>
                          
                          <Link to={article.url} className="block">
                            <h3 className="text-lg font-semibold text-gray-900 mb-2 hover:text-blue-600">
                              {article.title}
                            </h3>
                            <p className="text-gray-600 text-sm mb-2">{article.summary}</p>
                          </Link>
                          
                          <div className="flex justify-between items-center">
                            <span className="text-xs bg-blue-100 text-blue-800 px-2 py-1 rounded-full">
                              {article.topic}
                            </span>
                          </div>
                        </div>
                      </div>
                    ))}
                  </div>
                ) : (
                  <div className="text-center py-12 bg-gray-50 rounded-lg">
                    <History size={48} className="mx-auto text-gray-400 mb-4" />
                    <h3 className="text-xl font-medium text-gray-900 mb-2">No reading history</h3>
                    <p className="text-gray-500 mb-6">
                      Articles you read will appear here to help you keep track.
                    </p>
                    <Link
                      to="/"
                      className="inline-flex items-center px-4 py-2 bg-blue-600 text-white rounded-md hover:bg-blue-700"
                    >
                      Browse News
                    </Link>
                  </div>
                )}
              </div>
            )}
            
            {/* Notifications */}
            {activeTab === 'notifications' && (
              <div>
                <div className="flex justify-between items-center mb-6">
                  <h2 className="text-2xl font-bold">Notification Settings</h2>
                  <button
                    onClick={toggleEdit}
                    className={`flex items-center px-4 py-2 rounded-md text-sm ${
                      isEditing
                        ? 'bg-gray-100 text-gray-700'
                        : 'bg-blue-600 text-white hover:bg-blue-700'
                    }`}
                  >
                    {isEditing ? (
                      <>
                        <X size={16} className="mr-2" />
                        <span>Cancel</span>
                      </>
                    ) : (
                      <>
                        <Edit2 size={16} className="mr-2" />
                        <span>Edit Settings</span>
                      </>
                    )}
                  </button>
                </div>
                
                <div className="space-y-6">
                  <div className="space-y-4">
                    <label className="flex items-center justify-between">
                      <span className="text-gray-700">Email Notifications</span>
                      <div className={`relative inline-block w-12 h-6 transition-colors duration-200 ease-in-out ${
                        userPreferences.preferences.emailNotifications ? 'bg-blue-600' : 'bg-gray-200'
                      } rounded-full ${isEditing ? 'cursor-pointer' : 'cursor-not-allowed opacity-60'}`}>
                        <input
                          type="checkbox"
                          name="emailNotifications"
                          checked={userPreferences.preferences.emailNotifications}
                          onChange={handleToggleChange}
                          disabled={!isEditing}
                          className="sr-only"
                        />
                        <span className={`absolute left-0 top-0 h-6 w-6 transform transition-transform duration-200 ease-in-out bg-white rounded-full shadow-md ${
                          userPreferences.preferences.emailNotifications ? 'translate-x-6' : 'translate-x-0'
                        }`}></span>
                      </div>
                    </label>
                    <p className="text-sm text-gray-500 pl-8">Receive daily and weekly news digests based on your preferences.</p>
                  </div>
                  
                  <div className="space-y-4">
                    <label className="flex items-center justify-between">
                      <span className="text-gray-700">Push Notifications</span>
                      <div className={`relative inline-block w-12 h-6 transition-colors duration-200 ease-in-out ${
                        userPreferences.preferences.pushNotifications ? 'bg-blue-600' : 'bg-gray-200'
                      } rounded-full ${isEditing ? 'cursor-pointer' : 'cursor-not-allowed opacity-60'}`}>
                        <input
                          type="checkbox"
                          name="pushNotifications"
                          checked={userPreferences.preferences.pushNotifications}
                          onChange={handleToggleChange}
                          disabled={!isEditing}
                          className="sr-only"
                        />
                        <span className={`absolute left-0 top-0 h-6 w-6 transform transition-transform duration-200 ease-in-out bg-white rounded-full shadow-md ${
                          userPreferences.preferences.pushNotifications ? 'translate-x-6' : 'translate-x-0'
                        }`}></span>
                      </div>
                    </label>
                    <p className="text-sm text-gray-500 pl-8">Receive browser notifications for breaking news in your topics.</p>
                  </div>
                  
                  {/* Save button */}
                  {isEditing && (
                    <div className="flex justify-end mt-6">
                      <button
                        onClick={savePreferences}
                        disabled={saveStatus === 'saving'}
                        className="flex items-center px-4 py-2 bg-blue-600 text-white rounded-md hover:bg-blue-700 disabled:opacity-50"
                      >
                        {saveStatus === 'saving' ? (
                          <>
                            <div className="animate-spin rounded-full h-4 w-4 border-t-2 border-b-2 border-white mr-2"></div>
                            <span>Saving...</span>
                          </>
                        ) : (
                          <>
                            <Save size={16} className="mr-2" />
                            <span>Save Settings</span>
                          </>
                        )}
                      </button>
                    </div>
                  )}
                </div>
              </div>
            )}
            
            {/* Privacy & Security */}
            {activeTab === 'privacy' && (
              <div>
                <h2 className="text-2xl font-bold mb-6">Privacy & Security</h2>
                
                <div className="space-y-8">
                  <div>
                    <h3 className="text-lg font-medium text-gray-900 mb-4">Data Privacy</h3>
                    <p className="text-gray-600 mb-4">
                      Control how we use your data to personalize your experience.
                    </p>
                    
                    <div className="space-y-4">
                      <label className="flex items-center justify-between">
                        <span className="text-gray-700">Allow personalized recommendations</span>
                        <div className="relative inline-block w-12 h-6 transition-colors duration-200 ease-in-out bg-blue-600 rounded-full cursor-pointer">
                          <input
                            type="checkbox"
                            checked={true}
                            className="sr-only"
                          />
                          <span className="absolute left-0 top-0 h-6 w-6 transform translate-x-6 transition-transform duration-200 ease-in-out bg-white rounded-full shadow-md"></span>
                        </div>
                      </label>
                      
                      <label className="flex items-center justify-between">
                        <span className="text-gray-700">Allow location-based content</span>
                        <div className="relative inline-block w-12 h-6 transition-colors duration-200 ease-in-out bg-blue-600 rounded-full cursor-pointer">
                          <input
                            type="checkbox"
                            checked={true}
                            className="sr-only"
                          />
                          <span className="absolute left-0 top-0 h-6 w-6 transform translate-x-6 transition-transform duration-200 ease-in-out bg-white rounded-full shadow-md"></span>
                        </div>
                      </label>
                      
                      <label className="flex items-center justify-between">
                        <span className="text-gray-700">Allow usage analytics</span>
                        <div className="relative inline-block w-12 h-6 transition-colors duration-200 ease-in-out bg-blue-600 rounded-full cursor-pointer">
                          <input
                            type="checkbox"
                            checked={true}
                            className="sr-only"
                          />
                          <span className="absolute left-0 top-0 h-6 w-6 transform translate-x-6 transition-transform duration-200 ease-in-out bg-white rounded-full shadow-md"></span>
                        </div>
                      </label>
                    </div>
                  </div>
                  
                  <div>
                    <h3 className="text-lg font-medium text-gray-900 mb-4">Account Security</h3>
                    
                    <div className="space-y-4">
                      <div>
                        <button className="text-blue-600 hover:text-blue-800 font-medium">
                          Change Password
                        </button>
                      </div>
                      
                      <div>
                        <button className="text-blue-600 hover:text-blue-800 font-medium">
                          Setup Two-Factor Authentication
                        </button>
                      </div>
                      
                      <div>
                        <button className="text-blue-600 hover:text-blue-800 font-medium">
                          View Account Activity
                        </button>
                      </div>
                    </div>
                  </div>
                  
                  <div>
                    <h3 className="text-lg font-medium text-gray-900 mb-4">Data Management</h3>
                    
                    <div className="space-y-4">
                      <div>
                        <button className="text-blue-600 hover:text-blue-800 font-medium">
                          Download Your Data
                        </button>
                      </div>
                      
                      <div>
                        <button className="text-red-600 hover:text-red-800 font-medium">
                          Delete Your Account
                        </button>
                      </div>
                    </div>
                  </div>
                </div>
              </div>
            )}
          </div>
        </div>
      </div>
    </PageLayout>
  );
};

export default UserProfile;